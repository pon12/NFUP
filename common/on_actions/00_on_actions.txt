on_actions = {
	# country
	on_new_term_election = {
		random_events = {
			100 = usa.6
			100 = usa.7
		}
		random_events = {
			100 = lar_spain.1
		}
	}

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}

	# country, FROM = ace, PREV = enemy ace
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}

	# our ace is killed by no name
	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}

	# our ace died in accident
	# country, FROM = ace
	on_ace_killed_on_accident = {

	}

	# enemy ace is killed by our non name
	# country, FROM = enemy ace
	on_non_ace_killed_other_ace = {

	}

	on_nuke_drop = {

		effect = {
			set_global_flag = first_nuke_dropped
			if = {
				limit = { NOT = { has_global_flag = first_nuke_dropped } }
				country_event = { id = generic.8 }
			}
			if = {
				limit = { has_idea = race_for_the_bomb_outclassed }
				remove_ideas = race_for_the_bomb_outclassed
			}
			if = {
				limit = { NOT = { has_country_flag = achievement_has_dropped_nuke } }
				goto_state = FROM
				set_country_flag = achievement_has_dropped_nuke
			}
			if = {
				limit = {
					FROM = { state = 378 }
				}
				set_country_flag = achievement_has_nuked_california
			}
			if = {
				limit = {
					FROM = { is_core_of = AST }
				}
				set_country_flag = achievement_AST_nuke_self
			}
			if = {
				limit = {
					tag = SWE
					FROM = {
						is_owned_by = DEN
						is_core_of = DEN
					}
				}
				set_country_flag = achievement_med_plutonium
			}
			if = {
				limit = {
					FROM = {
						is_core_of = JAP
					}
					has_global_flag = JAP_nuke_1
					NOT = {
						has_global_flag = JAP_nuke_2
					}
				}
				set_global_flag = JAP_nuke_2
			}
			if = {
				limit = {
					FROM = {
						is_core_of = JAP
					}
					NOT = {
						has_global_flag = JAP_nuke_1
					}
				}
				set_global_flag = JAP_nuke_1
			}

			news_event = { id = nuke_dropped.2 days = 1}
			news_event = { id = nuke_dropped.3 days = 1}
			news_event = { id = nuke_dropped.4 days = 1}
			news_event = { id = nuke_dropped.5 days = 1}
			news_event = { id = nuke_dropped.6 days = 1}
			news_event = { id = nuke_dropped.7 days = 1}
			news_event = { id = nuke_dropped.8 days = 1}
			news_event = { id = nuke_dropped.9 days = 1}
			news_event = { id = nuke_dropped.10 days = 1}
			news_event = { id = nuke_dropped.11 days = 1}
			news_event = { id = nuke_dropped.12 days = 1}
			news_event = { id = nuke_dropped.13 days = 1}
		}
		random_events = {
			100 = nuke_dropped.0
		}
	}


	on_border_war_lost = {
		effect = {
			owner = {
				country_event = { id = china.14 }
				country_event = { id = china.16 }
			}
		}
	}

	#FROM is war target
	on_declare_war = {
		effect = {

			#Remove MEFO bills if Germany goes to war
			if = {
				limit = {
					ROOT = { original_tag = GER }
					ROOT = { GER_has_mefo_bills = yes }
					NOT = { FROM = { original_tag = GER } } # Don't remove it from Fascist Germany if they start the civil war
				}
				ROOT = {
					GER_remove_mefo_bills = yes
					set_country_flag = mefo_bills_removed_through_war
				}
			}

			#Remove MEFO bills if Germany is declared war on
			if = {
				limit = {
					FROM = { original_tag = GER }
					FROM = { GER_has_mefo_bills = yes }
				}
				FROM = {
					GER_remove_mefo_bills = yes
					set_country_flag = mefo_bills_removed_through_war
				}
			}
		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			if = {
				limit = {
					tag = GER
					FROM = {
						tag = SOV
					}
					NOT = { has_global_flag = fall_of_berlin_sov }
				}
				play_victory_parade_effect = yes
			}
			if = {
				limit = {
					tag = GER
				}
				8 = {
					if = {
						limit = { is_core_of = ROOT }
						remove_core_of = ROOT
					}
				}
				28 = {
					if = {
						limit = { is_core_of = ROOT }
						remove_core_of = ROOT
					}
				}
				807 = {
					if = {
						limit = { is_core_of = ROOT }
						remove_core_of = ROOT
					}
				}
				85 = {
					if = {
						limit = { is_core_of = ROOT }
						remove_core_of = ROOT
					}
				}
				if = {
					limit = { has_government = fascism }
					69 = {
						if = {
							limit = { is_core_of = ROOT }
							remove_core_of = ROOT
						}
					}
					74 = {
						if = {
							limit = { is_core_of = ROOT }
							remove_core_of = ROOT
						}
					}
				}
			}
			if = {
				limit = {
					NOT = { original_tag = GER }
					NOT = { has_government = fascism }
					has_civil_war = no
					NOT = {
						AND = {
							FROM = {
								original_tag = SPR
							}
							original_tag = SPR
						}
					}
				}
				news_event = { id = country_capitulated.0 days = 0 }
			}
			if = {
				limit = {
					FROM = { tag = JAP }
					ROOT = { tag = CHI }
				}
				JAP = { JAP_intervene_in_china_remove = yes }
			}
		}
	}

	# ROOT is previously capitulated country
	on_uncapitulation = {
		effect = {
			if = {
				limit = {
					original_tag = FRA
					has_government = democratic
					is_puppet = no
				}
				drop_cosmetic_tag = yes
			}
		}
	}

	on_government_change = {
		effect = {
			if = {
				limit = { has_government = democratic }
				if = {
					limit = { has_idea = democratic_opposition_voicing_protests }
					remove_ideas = democratic_opposition_voicing_protests
				}
				if = {
					limit = { has_idea = democratic_revolutionaries }
					remove_ideas = democratic_revolutionaries
				}
				if = {
					limit = { has_idea = reign_of_terror }
					remove_ideas = reign_of_terror
				}
			}
			if = {
				limit = { has_government = communism }
				if = {
					limit = { TAG = SAF }
					set_cosmetic_tag = SAF_COM
				}
				if = {
					limit = { has_idea = communist_partisans_recruiting }
					remove_ideas = communist_partisans_recruiting
				}
				if = {
					limit = { has_idea = communist_revolutionaries }
					remove_ideas = communist_revolutionaries
				}
				if = {
					limit = { has_idea = communism_defeated }
					remove_ideas = communism_defeated
				}

				#Remove anti_soviet_pact
				if = {
					limit = { has_idea = anti_soviet_pact }
					remove_ideas = anti_soviet_pact
				}
			}
			if = {
				limit = { has_government = fascism }
				if = {
					limit = { has_idea = fascist_assault_divisions }
					remove_ideas = fascist_assault_divisions
				}
				if = {
					limit = { has_idea = fascist_revolutionaries }
					remove_ideas = fascist_revolutionaries
				}
				if = {
					limit = { has_idea = fascism_defeated }
					remove_ideas = fascism_defeated
				}
				if = {
					limit = { has_idea = anti_nazi_coup }
					remove_ideas = anti_nazi_coup
				}
			}
		}
	}

	on_coup_succeeded = {
		effect = {
			#Turn elections on for democracies created from coup
			random_other_country = {
				limit = {
					has_government = democratic
					original_tag = ROOT
				}
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
				}
			}
		}
	}

	#ROOT = country that joined a war
	#Fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first
	on_war = { 
		effect = {
			if = {
				limit = {
					tag = USA
					has_war_with = JAP
					NOT = { has_global_flag = day_of_infamy_happened }
					has_country_leader = { character = USA_franklin_delano_roosevelt ruling_only = yes }
				}
				play_day_of_infamy_effect = yes
			}
		}
	}
	#ROOT = attacking side
	#FROM = defending side
	#fired when two countries end up at war with each other (on_war is fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first)
	on_war_relation_added = {
		effect = {
			if = {
				limit = {
					tag = GER
					FROM = {
						tag = SOV
						has_government = communism
					}
				}
				set_global_flag = { flag = barbarossa_counter value = 1 days = 60 }
			}
			if = {
				limit = {
					ROOT = { original_tag = GER }
					ROOT = { GER_has_mefo_bills = yes }
					NOT = { FROM = { original_tag = GER } }
				}
				ROOT = {
					GER_remove_mefo_bills = yes
					set_country_flag = mefo_bills_removed_through_war
				}
			}
			if = {
				limit = {
					FROM = { original_tag = GER }
					FROM = { GER_has_mefo_bills = yes }
					NOT = { ROOT = { original_tag = GER } }
				}
				FROM = {
					GER_remove_mefo_bills = yes
					set_country_flag = mefo_bills_removed_through_war
				}
			}
		}
	}
	#ROOT - country that just went to peace
	on_peaceconference_ended = {
		effect = {
			if = {
				limit = {
					tag = USA
					is_historical_focus_on = yes
					has_global_flag = day_of_infamy_happened
					has_government = democratic
					JAP = { has_government = democratic }
				}
				play_guns_are_silent_effect = yes
			}
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			if = {
				limit = {
					tag = FRA #to avoid third party taking over
					FROM = {
						is_in_faction_with = GER
					}
					FROM.FROM = {
						is_core_of = FRA
						NOT = {
							state = 459
							state = 460
							state = 513
						}
					}
					FRA = {
						has_capitulated = yes
						is_in_faction_with = USA
					}
					NOT = { has_global_flag = d_day_happened }
				}
				play_order_of_the_day_effect = yes
			}
			if = {
				limit = {
					OR = {
						TAG = ENG
						TAG = USA
						TAG = AST
						TAG = FRA
						TAG = CAN
						TAG = NZL
						TAG = SAF
					}
					FROM = { original_tag = GER }
					FROM = { has_war_with = ROOT }
					FROM.FROM = { state = 16 }
				}
				news_event = news.134
			}
			if = {
				limit = {
					OR = {
						TAG = ENG
						TAG = USA
					}
					FROM = { original_tag = GER }
					FROM = { has_war_with = ROOT }
					FROM.FROM = { state = 126 }
				}
				news_event = news.137
			}
			if = {
				limit = {
					OR = {
						# TAG = POL # don't include POL as the event is about Soviet capture of Warsaw
						TAG = SOV
					}
					NOT = { SOV = { has_war_with = POL } }
					FROM = { original_tag = GER }
					FROM = { has_war_with = ROOT }
					FROM.FROM = { state = 10 }
				}
				news_event = news.139
			}
		}
	}


	# root country that paradrops
	# scope state that is paradroped into
	# from scope state that the paradrop started
	on_paradrop = {
	    effect = {
		    ROOT = { set_country_flag = has_paradropped_flag }
		}
	}
	on_ruling_party_change = {
		# temp var old_ideology_token is available for effects
		effect = {
			every_controlled_state = {
				limit = {
					has_resistance = yes
				}
				set_temp_variable = { new_compliance = compliance }
				multiply_temp_variable = { new_compliance = 0.5 }
				set_compliance = new_compliance
			}
		}
	}

	on_unit_leader_promote_from_ranks_veteran = { #Unit leader scope, FROM is unit
		effect = {
			FROM = {
				add_random_valid_trait_from_unit = {
					character = ROOT
				}
			}
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_unit_leader_promote_from_ranks_green = { #Unit leader scope, FROM is unit
		effect = {
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_add_history = { #Unit Scope
		effect = {
			#add_unit_medal_to_latest_entry = {
			#	unit_medals = iron_cross_second_class
			#} #This would add a unit medal to the history entry you just received
		}
	}
	
	# root is the state that was dropped into
	# from is the dropping country
	# this differs from on_paradrop in that it is run once per paradrop, not once per unit dropped

	on_peaceconference_started = {
		effect = {
			if = {
				limit = {
					295 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				295 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					538 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				538 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					888 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				888 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					889 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				889 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					890 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				890 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}


			if = {
				limit = {
					769 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				769 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					768 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				768 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					718 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				718 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					635 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				635 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}
		}
	}
}
