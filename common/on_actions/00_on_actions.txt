on_actions = {
	on_startup = {
		effect = {
			# Add Canals
			IF = {
				limit = {
					has_dlc = "Gotterdammerung" 
				}
				58 = {
					add_building_construction = {
						type = canal_kiel
						level = 1
						instant_build = yes
						province =  6389
					}
				}
				685 = {
					add_building_construction = {
						type = canal_panama
						level = 1
						instant_build = yes
						province =  7617
					}
				}
			}
		}
	}
	# country
	on_new_term_election = {
		random_events = {
			100 = usa.6
			100 = usa.7
		}
		random_events = {
			100 = lar_spain.1
		}
	}

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}

	# country, FROM = ace, PREV = enemy ace
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}

	# our ace is killed by no name
	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}

	# our ace died in accident
	# country, FROM = ace
	on_ace_killed_on_accident = {

	}

	# enemy ace is killed by our non name
	# country, FROM = enemy ace
	on_non_ace_killed_other_ace = {

	}

	# During justifying wargoals
	# triggered daily, so make sure there is a sink somewhere not firing events
	# country, FROM = target nation

	on_nuke_drop = {

		effect = {
			set_global_flag = first_nuke_dropped
			set_variable = {
				global.nukecountry = ROOT
			}
			if = {
				limit = { NOT = { has_global_flag = first_nuke_dropped } }
				country_event = { id = generic.8 }
			}
			if = {
				limit = { has_idea = race_for_the_bomb_outclassed }
				remove_ideas = race_for_the_bomb_outclassed
			}
			if = {
				limit = {
					NOT = { has_country_flag = achievement_has_dropped_nuke }
					num_nukes_being_dropped < 100
				}
				goto_state = FROM
				set_country_flag = achievement_has_dropped_nuke
			}
			if = {
				limit = {
					FROM = { state = 378 }
				}
				set_country_flag = achievement_has_nuked_california
			}
			if = {
				limit = {
					FROM = { is_core_of = AST }
				}
				set_country_flag = achievement_AST_nuke_self
			}
			if = {
				limit = {
					tag = SWE
					FROM = {
						is_owned_by = DEN
						is_core_of = DEN
					}
				}
				set_country_flag = achievement_med_plutonium
			}

			if = { #Med Plutonium 2 
				limit = {
					tag = DEN
					FROM = {
						is_owned_by = SWE
						is_core_of = SWE
					}
				}
				set_country_flag = achievement_med_plutonium_2
			}
			if = {
				limit = {
					FROM = {
						is_core_of = JAP
					}
					has_global_flag = JAP_nuke_1
					NOT = {
						has_global_flag = JAP_nuke_2
					}
				}
				set_global_flag = JAP_nuke_2
			}
			if = {
				limit = {
					FROM = {
						is_core_of = JAP
					}
					NOT = {
						has_global_flag = JAP_nuke_1
					}
				}
				set_global_flag = JAP_nuke_1
			}
			if = {
				limit = {
					FROM = {
						state = 953
					}
					NOT = {
						has_global_flag = land_of_fire_flag
					}
				}
				set_global_flag = land_of_fire_flag
			}

			news_event = { id = nuke_dropped.2 days = 1 }
			news_event = { id = nuke_dropped.3 days = 1 }
			news_event = { id = nuke_dropped.4 days = 1 }
			news_event = { id = nuke_dropped.5 days = 1 }
			news_event = { id = nuke_dropped.6 days = 1 }
			news_event = { id = nuke_dropped.7 days = 1 }
			news_event = { id = nuke_dropped.8 days = 1 }
			news_event = { id = nuke_dropped.9 days = 1 }
			news_event = { id = nuke_dropped.10 days = 1 }
			news_event = { id = nuke_dropped.11 days = 1 }
			news_event = { id = nuke_dropped.12 days = 1 }
			news_event = { id = nuke_dropped.13 days = 1 }
		}
	}

	# country random events
	#on_bi_yearly_pulse = {
	#
	#}

	#on_five_year_pulse = {
	#
	#}

	on_border_war_lost = {
		effect = {
			owner = {
				country_event = { id = china.14 }
				country_event = { id = china.16 }
			}
		}
	}

	# FROM is the faction Leader, ROOT is the country leaving the faction

	#FROM is the one that joins the faction
	on_create_faction = {
		effect = {
			# Sunset invasion check
			if = {
				limit = {
					FROM = { is_puppet = no }
					OR = {
						AND = {
							tag = MEX
							FROM = {
								capital_scope = {
									NOT = { is_on_continent = south_america }
								}
							}
						}
						AND = {
							FROM = {
								tag = MEX
							}
							capital_scope = {
								NOT = { is_on_continent = south_america }
							}
						}
					}
				}
				set_country_flag = achievement_failed_sunset_invasion
			}
		}
	}

	#FROM is war target
	on_declare_war = {
		effect = {
			#Germany has started a war - allies should try to contain Germany
			if = {
				limit = {
					ROOT = {
						tag = GER
					}
					NOT = {
						has_global_flag = GER_has_started_war
					}
				}
				set_global_flag = GER_has_started_war
			}

			#If prepared with surprise attack plan, get bonus
			if = {
				limit = {
					FROM = {
						original_tag = ROOT
						#has_civil_war = yes
						has_country_flag = formulated_surprise_attack_plan_for_civil_war
					}
					#has_civil_war = yes
				}
				FROM = {
					clr_country_flag = formulated_surprise_attack_plan_for_civil_war
					add_timed_idea = {
						idea = civil_war_surprise_attack_plan
						days = 30
					}
				}
			}
		}
	}

	# When a new faction is formed
	on_faction_formed = {
		effect = {
			news_event = { id = news.159 }
		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			if = {
				limit = {
					tag = GER
					FROM = {
						tag = SOV
					}
					NOT = { has_global_flag = fall_of_berlin_sov }
				}
				play_victory_parade_effect = yes
			}
			if = {
				limit = {
					tag = GER
				}
				8 = {
					if = {
						limit = { is_core_of = ROOT }
						remove_core_of = ROOT
					}
				}
				28 = {
					if = {
						limit = { is_core_of = ROOT }
						remove_core_of = ROOT
					}
				}
				807 = {
					if = {
						limit = { is_core_of = ROOT }
						remove_core_of = ROOT
					}
				}
				85 = {
					if = {
						limit = { is_core_of = ROOT }
						remove_core_of = ROOT
					}
				}
				if = {
					limit = { has_government = fascism }
					69 = {
						if = {
							limit = { is_core_of = ROOT }
							remove_core_of = ROOT
						}
					}
					74 = {
						if = {
							limit = { is_core_of = ROOT }
							remove_core_of = ROOT
						}
					}
				}
			}
			if = {
				limit = {
					NOT = { original_tag = GER }
					NOT = { has_government = fascism }
					has_civil_war = no
					NOT = {
						AND = {
							FROM = {
								original_tag = SPR
							}
							original_tag = SPR
						}
					}
				}
				news_event = { id = country_capitulated.0 days = 0 }
			}
			if = {
				limit = { tag = FRA }
				set_global_flag = FRA_already_surrendered
				set_variable = { global.FRA_capitulation_days = global.num_days }
			}
			if = {
				limit = {
					FROM = { tag = JAP }
					ROOT = { tag = CHI }
				}
				JAP = { JAP_intervene_in_china_remove = yes }
			}
			if = {
				limit = {
					original_tag = YUG
				}
				remove_ideas = YUG_idea_economic_aid
			}
			if = {
				limit = {
					NOT = { has_dlc = "Arms Against Tyranny"} # AAT uses separate system
					original_tag = DEN
					any_country = {
						OR = {
							tag = ROOT
							is_in_faction_with = ROOT
						}
						100 = { is_controlled_by = PREV }
					}

				}
				country_event = { id = wtt_denmark.1 days = 1 }
			}
			if = {
				limit = {
					original_tag = FRA
					has_government = democratic
					NOT = { has_global_flag = achievement_france_surrender } #might as well use the achievement flag to check if france.10 fired
					16 = { is_controlled_by = GER } # Don't fire if someone else is the occupier of Paris
					16 = { is_owned_by = FRA }
					is_subject = no
					is_in_faction_with = ENG
					has_war_with = GER
				}
				# Revoke all guarantees
				every_other_country = {
					limit = {
						is_guaranteed_by = ROOT
					}
					ROOT = {
						diplomatic_relation = {
							country = PREV
							relation = guarantee
							active = no
						}
					}
				}
				country_event = france.10
			}
			if = {
				limit = {
					original_tag = GER
					has_government = fascism
				}
				set_global_flag = germany_lost_the_war
			}
		}

		#GERMANY - Set Flag in capitulated country for Seize Gold Reserves Decision purposes
		effect = {
			if = {
				limit = {
					FROM = { 
						OR = {
							original_tag = GER
							is_subject_of = GER
						}
					}
				}
				ROOT = {
					set_country_flag = GER_has_capitulated_to_germany
				}
			}
		}

		effect = { #if Austria resists Anschluss, give Germany cores on Austria once they capitulate
			IF = {
				limit = {
					original_tag = AUS
					FROM = {
						original_tag = GER
						has_country_flag = GER_anscluss_rejected
					}
				}

				add_state_core = 4
				add_state_core = 152
				add_state_core = 153
				add_state_core = 848
				add_state_core = 975
				add_state_core = 976
			}
		}
	}

	# ROOT is previously capitulated country
	on_uncapitulation = {
		effect = {
			if = {
				limit = {
					original_tag = FRA
					has_government = democratic
					is_puppet = no
				}
				drop_cosmetic_tag = yes
			}
		}
	}
	#ROOT is capitulated country, FROM is winner.
	on_capitulation_immediate = {
		effect = {
			if = {
				limit = {
					ROOT = {
						original_tag = BEL
						is_in_faction = yes
						#is_government_in_exile = yes
					}
				}
				if = {
					limit = {
						295 = {
							is_fully_controlled_by = ROOT
						}
					}
					295 = { set_state_flag = prevent_auto_flip_after_capitulation }
				}

				if = {
					limit = {
						538 = {
							is_fully_controlled_by = ROOT
						}
					}

					538 = { set_state_flag = prevent_auto_flip_after_capitulation }
				}

				if = {
					limit = {
						888 = {
							is_fully_controlled_by = ROOT
						}
					}

					888 = { set_state_flag = prevent_auto_flip_after_capitulation }
				}

				if = {
					limit = {
						889 = {
							is_fully_controlled_by = ROOT
						}
					}
					889 = { set_state_flag = prevent_auto_flip_after_capitulation }

				}

				if = {
					limit = {
						890 = {
							is_fully_controlled_by = ROOT
						}
					}

					890 = { set_state_flag = prevent_auto_flip_after_capitulation }

				}

				if = {
					limit = {
						769 = {
							is_fully_controlled_by = ROOT
						}
					}

					769  = { set_state_flag = prevent_auto_flip_after_capitulation }
				}

				if = {
					limit = {
						768 = {
							is_fully_controlled_by = ROOT
						}
					}
					768 = { set_state_flag = prevent_auto_flip_after_capitulation }
				}

				if = {
					limit = {
						718 = {
							is_fully_controlled_by = ROOT
						}
					}
					718 = { set_state_flag = prevent_auto_flip_after_capitulation }
				}
			}
			
			if = {
				limit = {
					ROOT = {
						original_tag = FRA
						is_in_faction = yes
					}

					635 = { is_fully_controlled_by = ROOT }
				}

				635 = { set_state_flag = prevent_auto_flip_after_capitulation }
			}
		}
	}

	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord

	on_puppet = {
		effect = {
			if = {
				limit = {
					NOT = { has_elections = yes }
					has_government = democratic
				}
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
				}
			}
		}
	}

	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord

	on_release_as_puppet = {
		effect = {
			if = {
				limit = {
					OR = {
						original_tag = DDR
						original_tag = WGR
						original_tag = GER
					}
					has_government = communism
					OR = {
						has_country_leader = { name = "Wilhelm Pieck" }
						has_country_leader = { character = GER_wilhelm_pieck }
					}					FROM = {
						original_tag = SOV
						has_government = communism
						has_country_leader = { character = SOV_iosif_stalin } # Would look silly if Trotsky released Stalin's Puppet
					}
				}
				add_country_leader_trait = stalins_puppet
			}
			if = {
				limit = {
					NOT = { has_elections = yes }
					has_government = democratic
				}
				set_politics = {
					ruling_party = democratic
					elections_allowed = yes
				}
			}
		}
	}

	#Not run on a specific country.
	on_startup = {

		effect = {  
			RAJ = {
				if = {
					limit = { has_dlc = "Together for Victory" }
					
					set_variable = { RAJ_agrarian_society_value = -0.70 }
					add_dynamic_modifier = { modifier = RAJ_agrarian_society_dynamic }
					remove_ideas = RAJ_agrarian_society #For startup screen
				}
			}	
		}
	}


	#ROOT = country that joined a war
	#Fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first
	on_war = { 
		effect = {
			if = {
				limit = {
					tag = USA
					has_war_with = JAP
					NOT = { has_global_flag = day_of_infamy_happened }
					has_country_leader = { character = USA_franklin_delano_roosevelt ruling_only = yes }
				}
				play_day_of_infamy_effect = yes
			}
			if = {
				limit = {
					tag = ENG
					has_war_with = GER
					has_country_leader = { character = ENG_neville_chamberlain ruling_only = yes }
				}
				#play_war_with_germany_effect = yes
			}
		}
	}
	#ROOT = attacking side
	#FROM = defending side
	#fired when two countries end up at war with each other (on_war is fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first)
	on_war_relation_added = {
		#Remove MEFO bills if Germany is gets into a war
		effect = { 
			if = {
				limit = {
					ROOT = { 
						original_tag = GER
						has_dynamic_modifier = { modifier = GER_mefo_bills_modifier }
					}
					NOT = { 
						FROM = {
							OR = {
								original_tag = GER 
							}
						} 
					} # Don't remove it from Fascist Germany if they start the civil war
				}
				ROOT = {
					country_event = { id = germany_mefo_bills.1 hours = 2 }
				}
			}
			if = {
				limit = {
					FROM = { 
						original_tag = GER
						has_dynamic_modifier = { modifier = GER_mefo_bills_modifier }
					}
					ROOT = {
						NOT = {
							OR = {
								original_tag = GER
							}
						}
					}
				}
				FROM = {
					country_event = { id = germany_mefo_bills.1 hours = 2 }
				}
			}
		}
		effect = {
			if = {
				limit = {
					tag = GER
					FROM = {
						tag = SOV
						has_government = communism
					}
				}
				set_global_flag = { flag = barbarossa_counter value = 1 days = 60 }
			}
			if = {
				limit = {
					ROOT = { original_tag = GER }
					ROOT = { GER_has_mefo_bills = yes }
					NOT = { FROM = { original_tag = GER } }
				}
				ROOT = {
					GER_remove_mefo_bills = yes
					set_country_flag = mefo_bills_removed_through_war
				}
			}
			if = {
				limit = {
					FROM = { original_tag = GER }
					FROM = { GER_has_mefo_bills = yes }
					NOT = { ROOT = { original_tag = GER } }
				}
				FROM = {
					GER_remove_mefo_bills = yes
					set_country_flag = mefo_bills_removed_through_war
				}
			}
		}
		effect = {
			if = {
				limit = {
					ROOT = { original_tag = GER }
					NOT = { FROM = { original_tag = GER } }
				}
				FROM = {
					add_to_array = { 
						array = GER.GER_war_targets_array 
						value = THIS
					}
					log = "[THIS.GetName] was added to array"
				}
			}
			if = {
				limit = {
					FROM = { original_tag = GER }
					NOT = { ROOT = { original_tag = GER } }
				}
				ROOT = {
					add_to_array = { 
						array = GER.GER_war_targets_array 
						value = THIS
					}
					log = "[THIS.GetName] was added to array"
				}
			}
		}
	}
	#ROOT - country that just went to peace
	on_peaceconference_ended = {
		effect = {
			if = {
				limit = {
					tag = USA
					is_historical_focus_on = yes
					has_global_flag = day_of_infamy_happened
					has_government = democratic
					JAP = { has_government = democratic }
				}
				play_guns_are_silent_effect = yes
			}
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			if = {
				limit = {
					tag = FRA #to avoid third party taking over
					FROM = {
						is_in_faction_with = GER
					}
					FROM.FROM = {
						is_core_of = FRA
						NOT = {
							state = 459
							state = 460
							state = 513
						}
					}
					FRA = {
						has_capitulated = yes
						is_in_faction_with = USA
					}
					NOT = { has_global_flag = d_day_happened }
				}
				play_order_of_the_day_effect = yes
			}
			if = {
				limit = {
					OR = {
						TAG = ENG
						TAG = USA
						TAG = AST
						TAG = FRA
						TAG = CAN
						TAG = NZL
						TAG = SAF
					}
					FROM = { original_tag = GER }
					FROM = { has_war_with = ROOT }
					FROM.FROM = { state = 16 }
				}
				news_event = news.134
			}
			if = {
				limit = {
					OR = {
						TAG = ENG
						TAG = USA
					}
					FROM = { original_tag = GER }
					FROM = { has_war_with = ROOT }
					FROM.FROM = { state = 126 }
				}
				news_event = news.137
			}
			if = {
				limit = {
					OR = {
						# TAG = POL # don't include POL as the event is about Soviet capture of Warsaw
						TAG = SOV
					}
					NOT = { SOV = { has_war_with = POL } }
					FROM = { original_tag = GER }
					FROM = { has_war_with = ROOT }
					FROM.FROM = { state = 10 }
				}
				news_event = news.139
			}
			if = {
				limit = {
					tag = GER
					divisions_in_state = { state = FROM.FROM size > 0 }
					FROM = {
						original_tag = GER
						has_government = fascism
						has_civil_war = yes
					}
				}
				FROM.FROM = {
					set_state_flag = nazi_state_withdrawn
					random_list = {
						20 = {
							set_state_flag = nazi_state_withdrawn1
						}
						20 = {
							set_state_flag = nazi_state_withdrawn2
						}
						20 = {
							set_state_flag = nazi_state_withdrawn3
						}
						20 = {
							set_state_flag = nazi_state_withdrawn4
						}
						20 = {
							set_state_flag = nazi_state_withdrawn5
						}
					}
					state_event = { id = wtt_germany.49 trigger_for = controller }
				}
			}
			if = {
				limit = {
					tag = GER
					64 = { is_controlled_by = GER }
					any_other_country = {
						original_tag = GER
						has_government = fascism
						has_civil_war = yes
						owns_state = 64
					}
					NOT = { has_global_flag = fall_of_berlin_civil_war }
				}
				set_global_flag = fall_of_berlin_civil_war
				country_event = { id = wtt_germany.50 days = 1 random_hours = 3 }
			}
			if = {
				limit = {
					tag = GER
					has_country_flag = germany_war_return_kaiser
					has_government = neutrality
					FROM = {
						original_tag = HOL
						has_country_flag = netherlands_refused_return_kaiser
					}
					OR = {
						7 = { is_controlled_by = GER }
						HOL = { is_subject_of = GER }
					}
				}
				country_event = { id = wtt_germany.6 }
			}
			if = {
				limit = {
					tag = CSA
					has_war = yes
					FROM = {
						tag = USA
					}
					FROM.FROM = {
						is_core_of = USA
						not = { has_state_flag = USA_civil_war_state_cooldown }
					}
				}
				FROM.FROM = {
					save_event_target_as = CSA_liberated_state
					set_state_flag = {
						flag = USA_civil_war_state_cooldown
						days = 180
						value = 1
					}
					state_event = { id = mtg_usa_civil_war_fascists.201 trigger_for = controller }
				}
			}
			if = {
				limit = {
					tag = USA
					has_war_with = CSA
					FROM = {
						tag = CSA
					}
					FROM.FROM = {
						OR = {
							is_core_of = CSA
							is_claimed_by = USA
						}
						not = { has_state_flag = USA_civil_war_state_cooldown }
					}
				}
				FROM.FROM = {
					save_event_target_as = USA_liberated_state
					set_state_flag = {
						flag = USA_civil_war_state_cooldown
						days = 180
						value = 1
					}
					state_event = { id = mtg_usa_civil_war_fascists.202 trigger_for = controller }
				}
			}
			if = {
				limit = {
					original_tag = USA
					has_civil_war = yes
					tag = event_target:USA_civil_war_democrats
					has_country_flag = citizen_militia_spawned
					FROM.FROM = {
						is_core_of = USA
						has_state_flag = USA_citizen_militia
						not = { has_state_flag = USA_militia_spawned }
					}
				}
				FROM.FROM = {
					set_state_flag = USA_militia_spawned
					state_event = { id = mtg_usa_civil_war_fascists.1000 trigger_for = controller }
				}
			}
			if = {
				limit = {
					FROM.FROM = {
						state = 85
						has_dynamic_modifier = { modifier = international_city }
					}
					FROM = {
						OR = {
							original_tag = POL
							tag = POL
						}
					}
				}
				FROM.FROM = { remove_dynamic_modifier = { modifier = international_city } }
			}

			if = {
				limit = {
					FROM = {
						is_in_faction = yes
					}

					FROM.FROM = {
						has_state_flag = prevent_auto_flip_after_capitulation
					}
				}

				FROM.FROM = { clr_state_flag = prevent_auto_flip_after_capitulation }
				FROM = {
					set_state_controller = FROM.FROM
				}
				
			}
		}
		#MEFO BILLS AND ECONOMY OF CONQUEST MODIFIER
		effect = {
			if = {
				limit = {
					ROOT = { #New Controller
						original_tag = GER
						OR = {
							has_dynamic_modifier = { modifier = GER_mefo_bills_modifier }
							has_dynamic_modifier = { modifier = GER_economy_of_conquest_modifier }
						}
						FROM.FROM = {
							NOT = {
								is_core_of = PREV
							}
						}
					}
				}
				add_to_variable = { GER_num_of_occupied_states = 1 }
				if = {
					limit = { #Advance to Level 1 Occupied States
						GER_occupied_states_level_1 = yes
					}
					if = {
						limit = {
							check_variable = { GER_num_of_occupied_states_level < 1 }
						}
						add_to_variable = { GER_num_of_occupied_states_level = 1 }
						add_to_variable = {	GER_monthly_consumer_goods_increase = GER_change_monthly_CG_occupied_states }
					}
				}
				else_if = {
					limit = { #Advance to Level 2 Occupied States
						GER_occupied_states_level_2 = yes
					}
					if = {
						limit = {
							check_variable = { GER_num_of_occupied_states_level < 2 }
						}
						add_to_variable = { GER_num_of_occupied_states_level = 1 }
						add_to_variable = {	GER_monthly_consumer_goods_increase = GER_change_monthly_CG_occupied_states } #Increase monthly CG change
					}
				}
				else_if = {
					limit = { #Advance to Level 3 Occupied States
						GER_occupied_states_level_3 = yes						
					}
					if = {
						limit = {
							check_variable = { GER_num_of_occupied_states_level < 3 }
						}
						add_to_variable = { GER_num_of_occupied_states_level = 1 }
						add_to_variable = {	GER_monthly_consumer_goods_increase = GER_change_monthly_CG_occupied_states } #Increase monthly CG change
					}
				}
				else_if = {
					limit = { #Advance to Level 4 Occupied States
						GER_occupied_states_level_4 = yes
					}
					if = {
						limit = {
							check_variable = { GER_num_of_occupied_states_level < 4 }
						}
						add_to_variable = { GER_num_of_occupied_states_level = 1 }
						add_to_variable = {	GER_monthly_consumer_goods_increase = GER_change_monthly_CG_occupied_states } #Increase monthly CG change
					}
				}
				else_if = {
					limit = { #Much wow, so large empire, plz advance to Level 5 Occupied States
						GER_occupied_states_level_5 = yes
					}
					if = {
						limit = {
							check_variable = { GER_num_of_occupied_states_level < 5 }
						}
						add_to_variable = { GER_num_of_occupied_states_level = 1 }
						add_to_variable = {	GER_monthly_consumer_goods_increase = GER_change_monthly_CG_occupied_states } #Increase monthly CG change
					}
				}
			}
		}
		effect = {
			if = {
				limit = {
					FROM = { #Old Controller
						original_tag = GER
						OR = {
							has_dynamic_modifier = { modifier = GER_mefo_bills_modifier }
							has_dynamic_modifier = { modifier = GER_economy_of_conquest_modifier }
						}
						FROM.FROM = {
							NOT = {
								is_core_of = PREV
							}
						}
					}
				}
				FROM = { 
					subtract_from_variable = { GER_num_of_occupied_states = 1 }
					if = {
						limit = { #no wow, so smol empire, get outta here and return to level 0
							GER_occupied_states_level_0 = yes
						}
						if = {
							limit = {
								check_variable = { GER_num_of_occupied_states_level > 0 }
							}
							set_variable = { GER_num_of_occupied_states_level = 0 }
							subtract_from_variable = {	GER_monthly_consumer_goods_increase = GER_change_monthly_CG_occupied_states }
						}
					}
					else_if = {
						limit = { #Return to Level 1 Occupied States
							GER_occupied_states_level_1 = yes
						}
						if = {
							limit = {
								check_variable = { GER_num_of_occupied_states_level > 1 }
							}
							set_variable = { GER_num_of_occupied_states_level = 1 }
							subtract_from_variable = {	GER_monthly_consumer_goods_increase = GER_change_monthly_CG_occupied_states } #Reduce monthly CG change
						}
					}
					else_if = {
						limit = { #Return to Level 2 Occupied States
							GER_occupied_states_level_2 = yes						
						}
						if = {
							limit = {
								check_variable = { GER_num_of_occupied_states_level > 2 }
							}
							set_variable = { GER_num_of_occupied_states_level = 2 }
							subtract_from_variable = {	GER_monthly_consumer_goods_increase = GER_change_monthly_CG_occupied_states } #Reduce monthly CG change
						}
					}
					else_if = {
						limit = { #Return to Level 3 Occupied States
							GER_occupied_states_level_3 = yes
						}
						if = {
							limit = {
								check_variable = { GER_num_of_occupied_states_level >3 }
							}
							set_variable = { GER_num_of_occupied_states_level = 3 }
							subtract_from_variable = {	GER_monthly_consumer_goods_increase = GER_change_monthly_CG_occupied_states } #Reduce monthly CG change
						}
					}
					else_if = {
						limit = { #Return to Level 4 Occupied States
							GER_occupied_states_level_4 = yes
						}
						if = {
							limit = {
								check_variable = { GER_num_of_occupied_states_level > 4 }
							}
							set_variable = { GER_num_of_occupied_states_level = 4 }
							subtract_from_variable = {	GER_monthly_consumer_goods_increase = GER_change_monthly_CG_occupied_states } #Reduce monthly CG change
						}
					}
				}
			}
		}
	}

	# root country that invades
	# scope state that is invaded
	# from scope state that the invasion started


	# root country that paradrops
	# scope state that is paradroped into
	# from scope state that the paradrop started
	on_paradrop = {
	    effect = {
		    ROOT = { set_country_flag = has_paradropped_flag }
		}
	}
	on_ruling_party_change = {
		# temp var old_ideology_token is available for effects
		effect = {
			every_controlled_state = {
				limit = {
					has_resistance = yes
				}
				set_temp_variable = { new_compliance = compliance }
				multiply_temp_variable = { new_compliance = 0.5 }
				set_compliance = new_compliance
			}
		}
	}

	on_unit_leader_promote_from_ranks_veteran = { #Unit leader scope, FROM is unit
		effect = {
			FROM = {
				add_random_valid_trait_from_unit = {
					character = ROOT
				}
			}
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_unit_leader_promote_from_ranks_green = { #Unit leader scope, FROM is unit
		effect = {
			set_unit_leader_flag = field_promotion_achievement
		}
	}

	on_add_history = { #Unit Scope
		effect = {
			#add_unit_medal_to_latest_entry = {
			#	unit_medals = iron_cross_second_class
			#} #This would add a unit medal to the history entry you just received
		}
	}
	
	# root is the state that was dropped into
	# from is the dropping country
	# this differs from on_paradrop in that it is run once per paradrop, not once per unit dropped
	on_units_paradropped_in_state = {
		effect = {
			if = {
				limit = { 
					FROM = { has_tech = paras_dispersed_drop } 
					NOT = { 
						has_state_flag = {
						    flag = para_drop_effect
						    value = 0
						}
					}
					CONTROLLER = { NOT = { tag = FROM } }
				}
				SF_PARA_sabotage_effect = yes
			}
			if = {
				limit = { 
					FROM = { has_tech = paras_combat_drop } 
					NOT = { 
						has_state_flag = {
						    flag = para_drop_effect
						    value = 0
						}
					}
				}
				SF_PARA_combat_effect = yes
			}
		}
	}

	on_peaceconference_started = {
		effect = {
			if = {
				limit = {
					295 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				295 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					538 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				538 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					888 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				888 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					889 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				889 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					890 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				890 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}


			if = {
				limit = {
					769 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				769 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					768 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				768 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					718 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				718 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}

			if = {
				limit = {
					635 = { has_state_flag = prevent_auto_flip_after_capitulation }
				}
				635 = { clr_state_flag = prevent_auto_flip_after_capitulation }
			}
		}
	}



	on_monthly_GER = {
		effect = {
			if = {
				limit = {
					144 = { is_fully_controlled_by = GER }
					check_variable = { GER_narvik_civs < 8 }
					
					666 = {
						NOT = {
							has_dynamic_modifier = {
								modifier = SWE_blown_up_mines
							}
						}
					}
				}

				add_to_variable = { GER_narvik_shipments = 1 }
				if = {
					limit = {
						check_variable = { GER_narvik_shipments > 5 }
					}

					add_offsite_building = {
						type = industrial_complex
						level = 1
					}

					set_variable = { GER_narvik_shipments = 0 }
					add_to_variable = { GER_narvik_civs = 1 }
				}
			}
			#MEFO BILLS and ECONOMY OF CONQUEST increasing CG
			if = {
				limit = {
					OR = {
						has_dynamic_modifier = { modifier = GER_mefo_bills_modifier }
						has_dynamic_modifier = { modifier = GER_economy_of_conquest_modifier }
					}
				}
				if = {
					limit = {
						check_variable = { GER_industrial_consumer_goods_factor < 1 }
					}
					add_to_variable = { GER_industrial_consumer_goods_factor = GER_monthly_consumer_goods_increase }
					GER_add_mefo_bills_penalty = yes #Clamps CGFF too 100% and adds penalties
				}
				GER_reduce_mefo_bills_penalty = yes #This is a fail-safe, in case it wasn't lowered elsewhere but should have been
			}
		}
	}
}
